{"abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"anchor":"Overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Sharing state is the process of letting many features have access to the same data so that when any"},{"text":" ","type":"text"},{"text":"feature makes a change to this data it is instantly visible to every other feature. Such sharing can","type":"text"},{"type":"text","text":" "},{"text":"be really handy, but also does not play nicely with value types, which are copied rather than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared. Because the Composable Architecture highly prefers modeling domains with value types rather"},{"text":" ","type":"text"},{"text":"than reference types, sharing state can be tricky.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This is why the library comes with a few tools for sharing state with many parts of your","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"application. The majority of these tools exist outside of the Composable Architecture, and are in"},{"text":" ","type":"text"},{"type":"text","text":"a separate library called "},{"identifier":"https:\/\/github.com\/pointfreeco\/swift-sharing","type":"reference","isActive":true},{"type":"text","text":". You can refer"},{"type":"text","text":" "},{"text":"to that library’s documentation for more information, but we have also repeated some of the most","type":"text"},{"type":"text","text":" "},{"text":"important concepts in this article.","type":"text"}]},{"inlineContent":[{"text":"There are two main kinds of shared state in the library: explicitly passed state and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"persisted state. And there are 3 persistence strategies shipped with the library:"},{"text":" ","type":"text"},{"text":"in-memory, user defaults, and file storage. You can also implement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"your own persistence strategy if you want to use something other than user defaults or the file"},{"type":"text","text":" "},{"text":"system, such as SQLite.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Source-of-truth","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Explicit-shared-state","type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Persisted-shared-state","isActive":true}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#In-memory","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#User-defaults"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#File-storage"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Custom-persistence","isActive":true,"type":"reference"}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Observing-changes-to-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Initialization-rules","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Deriving-shared-state"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Testing-shared-state","isActive":true}]},{"items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-when-using-persistence"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Testing-when-using-custom-persistence-strategies","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Overriding-shared-state-in-tests","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"#UI-Testing","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Testing-tips","isActive":true,"type":"reference"}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Read-only-shared-state","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"identifier":"#Type-safe-keys","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Concurrent-mutations-to-shared-state","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Shared-state-in-pre-observation-apps","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Gotchas-of-Shared","type":"reference","isActive":true}]}]}],"type":"unorderedList"},{"type":"heading","level":2,"text":"“Source of truth”","anchor":"Source-of-truth"},{"inlineContent":[{"type":"text","text":"First a quick discussion on defining exactly what “shared state” is. A common concept thrown around"},{"type":"text","text":" "},{"text":"in architectural discussions is “single source of truth.” This is the idea that the complete state","type":"text"},{"type":"text","text":" "},{"text":"of an application, even its navigation, can be driven off a single piece of data. It’s a great idea,","type":"text"},{"type":"text","text":" "},{"text":"in theory, but in practice it can be quite difficult to completely embrace.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First of all, a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"single"}]},{"text":" piece of data to drive ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of application state is just not feasible."},{"type":"text","text":" "},{"type":"text","text":"There is a lot of state in an application that is fine to be local to a view and does not need"},{"text":" ","type":"text"},{"text":"global representation. For example, the state of whether a button is being pressed is probably fine","type":"text"},{"type":"text","text":" "},{"text":"to reside privately inside the button.","type":"text"}]},{"inlineContent":[{"type":"text","text":"And second, applications typically do not have a "},{"type":"emphasis","inlineContent":[{"text":"single","type":"text"}]},{"type":"text","text":" source of truth. That is far too"},{"type":"text","text":" "},{"text":"simplistic. If your application loads data from an API, or from disk, or from user defaults, then","type":"text"},{"type":"text","text":" "},{"text":"the “truth” for that data does not lie in your application. It lies externally.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In reality, there are ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"two","type":"text"}]},{"type":"text","text":" sources of “truth” in any application:"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"There is the state the application needs to execute its logic and behavior. This is the kind of"},{"text":" ","type":"text"},{"text":"state that determines if a button is enabled or disabled, drives navigation such as sheets and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"drill-downs, and handles validation of forms. Such state only makes sense for the application."}]}]},{"content":[{"inlineContent":[{"text":"Then there is a second source of “truth” in an application, which is the data that lies in some","type":"text"},{"text":" ","type":"text"},{"text":"external system and needs to be loaded into the application. Such state is best modeled as a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency or using the shared state tools discussed in this article."}],"type":"paragraph"}]}],"type":"orderedList"},{"anchor":"Explicit-shared-state","level":2,"type":"heading","text":"Explicit shared state"},{"inlineContent":[{"text":"This is the simplest kind of shared state to get started with. It allows you to share state amongst","type":"text"},{"text":" ","type":"text"},{"text":"many features without any persistence. The data is only held in memory, and will be cleared out the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"next time the application is run."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To share data in this style, use the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper with no arguments."},{"text":" ","type":"text"},{"text":"For example, suppose you have a feature that holds a count and you want to be able to hand a shared","type":"text"},{"text":" ","type":"text"},{"text":"reference to that count to other features. You can do so by holding onto a ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property in"},{"text":" ","type":"text"},{"type":"text","text":"the feature’s state:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct ParentFeature {","  @ObservableState","  struct State {","    @Shared var count: Int","    \/\/ Other properties","  }","  \/\/ ...","}"]},{"inlineContent":[{"text":"Then suppose that this feature can present a child feature that wants access to this shared ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" ","type":"text"},{"type":"text","text":"value. It too would hold onto a "},{"type":"codeVoice","code":"@Shared"},{"text":" property to a count:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct ChildFeature {","  @ObservableState","  struct State {","    @Shared var count: Int","    \/\/ Other properties","  }","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"When the parent features creates the child feature’s state, it can pass a "},{"inlineContent":[{"type":"text","text":"reference"}],"type":"emphasis"},{"text":" to the shared","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"count rather than the actual count value by using the "},{"code":"$count","type":"codeVoice"},{"type":"text","text":" projected value:"}],"type":"paragraph"},{"syntax":"swift","code":["case .presentButtonTapped:","  state.child = ChildFeature.State(count: state.$count)","  \/\/ ..."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Now any mutation the ","type":"text"},{"code":"ChildFeature","type":"codeVoice"},{"type":"text","text":" makes to its "},{"type":"codeVoice","code":"count"},{"type":"text","text":" will be instantly made to the"},{"text":" ","type":"text"},{"code":"ParentFeature","type":"codeVoice"},{"text":"’s count too.","type":"text"}]},{"anchor":"Persisted-shared-state","text":"Persisted shared state","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Explicitly shared state discussed above is a nice, lightweight way to share a piece of data with"},{"text":" ","type":"text"},{"text":"many parts of your application. However, sometimes you want to share state with the entire","type":"text"},{"type":"text","text":" "},{"type":"text","text":"application without having to pass it around explicitly. One can do this by passing a"},{"type":"text","text":" "},{"type":"codeVoice","code":"SharedKey"},{"type":"text","text":" to the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper, and the library comes with three persistence"},{"text":" ","type":"text"},{"type":"text","text":"strategies, as well as the ability to create custom persistence strategies."}],"type":"paragraph"},{"text":"In-memory","type":"heading","anchor":"In-memory","level":4},{"type":"paragraph","inlineContent":[{"text":"This is the simplest persistence strategy in that it doesn’t actually persist at all. It keeps","type":"text"},{"type":"text","text":" "},{"text":"the data in memory and makes it available to every part of the application, but when the app is","type":"text"},{"text":" ","type":"text"},{"text":"relaunched the data will be reset back to its default.","type":"text"}]},{"inlineContent":[{"type":"text","text":"It can be used by passing "},{"code":"inMemory","type":"codeVoice"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"@Shared"},{"text":" property wrapper.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"For example, suppose you want to share an integer count value with the entire application so that"},{"text":" ","type":"text"},{"text":"any feature can read from and write to the integer. This can be done like so:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct ChildFeature {","  @ObservableState","  struct State {","    @Shared(.inMemory(\"count\")) var count = 0","    \/\/ Other properties","  }","  \/\/ ...","}"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When using a persistence strategy with "},{"type":"codeVoice","code":"@Shared"},{"text":" you must provide a default value, which is","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"used for the first access of the shared state."}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"Now any part of the application can read from and write to this state, and features will never"},{"type":"text","text":" "},{"type":"text","text":"get out of sync."}],"type":"paragraph"},{"text":"User defaults","level":4,"anchor":"User-defaults","type":"heading"},{"inlineContent":[{"type":"text","text":"If you would like to persist your shared value across application launches, then you can use the"},{"type":"text","text":" "},{"type":"codeVoice","code":"appStorage"},{"text":" strategy with ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" in order to automatically"},{"type":"text","text":" "},{"type":"text","text":"persist any changes to the value to user defaults. It works similarly to in-memory sharing discussed"},{"type":"text","text":" "},{"text":"above. It requires a key to store the value in user defaults, as well as a default value that will","type":"text"},{"type":"text","text":" "},{"text":"be used when there is no value in the user defaults:","type":"text"}],"type":"paragraph"},{"code":["@Shared(.appStorage(\"count\")) var count = 0"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"That small change will guarantee that all changes to "},{"code":"count","type":"codeVoice"},{"text":" are persisted and will be","type":"text"},{"text":" ","type":"text"},{"text":"automatically loaded the next time the application launches.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This form of persistence only works for simple data types because that is what works best with"},{"type":"text","text":" "},{"code":"UserDefaults","type":"codeVoice"},{"type":"text","text":". This includes strings, booleans, integers, doubles, URLs, data, and more. If you"},{"type":"text","text":" "},{"text":"need to store more complex data, such as custom data types serialized to JSON, then you will want","type":"text"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":" strategy or a custom persistence strategy."}]},{"anchor":"File-storage","level":4,"type":"heading","text":"File storage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you would like to persist your shared value across application launches, and your value is"},{"text":" ","type":"text"},{"type":"text","text":"complex (such as a custom data type), then you can use the "},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"strategy with "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":". It automatically persists any changes to the file system."}]},{"inlineContent":[{"text":"It works similarly to the in-memory sharing discussed above, but it requires a URL to store the data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on disk, as well as a default value that will be used when there is no data in the file system:"}],"type":"paragraph"},{"code":["@Shared(.fileStorage(URL(\/* ... *\/)) var users: [User] = []"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strategy works by serializing your value to JSON to save to disk, and then deserializing JSON"},{"text":" ","type":"text"},{"text":"when loading from disk. For this reason the value held in ","type":"text"},{"type":"codeVoice","code":"@Shared(.fileStorage(…))"},{"type":"text","text":" must conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}]},{"text":"Custom persistence","level":4,"anchor":"Custom-persistence","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to define all new persistence strategies for the times that user defaults or JSON"},{"type":"text","text":" "},{"type":"text","text":"files are not sufficient. To do so, define a type that conforms to the "},{"type":"codeVoice","code":"SharedKey"},{"text":" protocol:","type":"text"}]},{"type":"codeListing","code":["public final class CustomSharedKey: SharedKey {","  \/\/ ...","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then define a static function on the "},{"type":"codeVoice","code":"SharedKey"},{"text":" protocol for creating your new","type":"text"},{"type":"text","text":" "},{"type":"text","text":"persistence strategy:"}]},{"type":"codeListing","syntax":"swift","code":["extension SharedReaderKey {","  public static func custom<Value>(\/*...*\/) -> Self","  where Self == CustomPersistence<Value> {","    CustomPersistence(\/* ... *\/)","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"With those steps done you can make use of the strategy in the same way one does for","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.custom(\/* ... *\/)) var myValue: Value"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"SharedKey"},{"text":" protocol represents loading from ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" saving to some external storage,"},{"type":"text","text":" "},{"text":"such as the file system or user defaults. Sometimes saving is not a valid operation for the external","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"system, such as if your server holds onto a remote configuration file that your app uses to"},{"type":"text","text":" "},{"type":"text","text":"customize its appearance or behavior. In those situations you can conform to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"SharedReaderKey"},{"type":"text","text":" protocol. See "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Read-only-shared-state","type":"reference"},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"information."}]},{"anchor":"Observing-changes-to-shared-state","type":"heading","level":2,"text":"Observing changes to shared state"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper exposes a "},{"code":"publisher","type":"codeVoice"},{"type":"text","text":" property so that you can observe"},{"text":" ","type":"text"},{"text":"changes to the reference from any part of your application. For example, if some feature in your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"app wants to listen for changes to some shared "},{"code":"count","type":"codeVoice"},{"text":" value, then it can introduce an ","type":"text"},{"type":"codeVoice","code":"onAppear"},{"text":" ","type":"text"},{"type":"text","text":"action that kicks off a long-living effect that subscribes to changes of "},{"type":"codeVoice","code":"count"},{"type":"text","text":":"}]},{"syntax":"swift","code":["case .onAppear:","  return .publisher {","    state.$count.publisher","      .map(Action.countUpdated)","  }","","case .countUpdated(let count):","  \/\/ Do something with count","  return .none"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note that you will have to be careful for features that both hold onto shared state and subscribe"},{"type":"text","text":" "},{"type":"text","text":"to changes to that state. It is possible to introduce an infinite loop if you do something like"},{"text":" ","type":"text"},{"type":"text","text":"this:"}],"type":"paragraph"},{"code":["case .onAppear:","  return .publisher {","    state.$count.publisher","      .map(Action.countUpdated)","  }","","case .countUpdated(let count):","  state.count = count + 1","  return .none"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" changes, then ","type":"text"},{"code":"$count.publisher","type":"codeVoice"},{"type":"text","text":" emits, causing the "},{"code":"countUpdated","type":"codeVoice"},{"text":" action to be sent,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"causing the shared "},{"code":"count","type":"codeVoice"},{"type":"text","text":" to be mutated, causing "},{"type":"codeVoice","code":"$count.publisher"},{"text":" to emit, and so on.","type":"text"}],"type":"paragraph"},{"text":"Initialization rules","anchor":"Initialization-rules","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Because the state sharing tools use property wrappers there are special rules that must be followed"},{"type":"text","text":" "},{"type":"text","text":"when writing custom initializers for your types. These rules apply to "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"text":" kind of property","type":"text"},{"type":"text","text":" "},{"type":"text","text":"wrapper, including those that ship with vanilla SwiftUI (e.g. "},{"type":"codeVoice","code":"@State"},{"type":"text","text":", "},{"type":"codeVoice","code":"@StateObject"},{"text":", etc.),","type":"text"},{"type":"text","text":" "},{"text":"but the rules can be quite confusing and so below we describe the various ways to initialize","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared state."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is common to need to provide a custom initializer to your feature’s"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true},{"type":"text","text":" type, especially when modularizing. When using"},{"type":"text","text":" "},{"code":"@Shared","type":"codeVoice"},{"text":" in your ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" that can become complicated."},{"text":" ","type":"text"},{"text":"Depending on your exact situation you can do one of the following:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"You are using non-persisted shared state (i.e. no argument is passed to ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":"), and the"},{"type":"text","text":" "},{"type":"text","text":"“source of truth” of the state lives with the parent feature. Then the initializer should take a"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value and you can assign through the underscored property:"}]},{"syntax":"swift","type":"codeListing","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Shared<Int>, \/* other fields *\/) {","    self._count = count","    \/\/ other assignments","  }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using non-persisted shared state ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" no argument is passed to "},{"code":"@Shared","type":"codeVoice"},{"text":"), and the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“source of truth” of the state lives within the feature you are initializing. Then the initializer"},{"text":" ","type":"text"},{"text":"should take a plain, non-","type":"text"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value and you construct the "},{"code":"Shared","type":"codeVoice"},{"text":" value in the initializer:","type":"text"}]},{"code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Int, \/* other fields *\/) {","    self._count = Shared(count)","    \/\/ other assignments","  }","}"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using a persistence strategy with shared state ("},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":""},{"text":" ","type":"text"},{"code":"appStorage","type":"codeVoice"},{"text":", ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"etc."}],"type":"emphasis"},{"type":"text","text":"),"},{"text":" ","type":"text"},{"text":"then the initializer should take a plain, non-","type":"text"},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" value and you construct the "},{"type":"codeVoice","code":"Shared"},{"text":" value in","type":"text"},{"type":"text","text":" "},{"text":"the initializer using the initializer which takes a","type":"text"},{"text":" ","type":"text"},{"code":"SharedKey","type":"codeVoice"},{"type":"text","text":" as the second argument:"}]},{"type":"codeListing","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Int, \/* other fields *\/) {","    self._count = Shared(wrappedValue: count, .appStorage(\"count\"))","    \/\/ other assignments","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The declaration of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" can use "},{"code":"@Shared","type":"codeVoice"},{"text":" without an argument because the persistence","type":"text"},{"text":" ","type":"text"},{"text":"strategy is specified in the initializer.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The value passed to this initializer is only used if the external storage does not"},{"type":"text","text":" "},{"type":"text","text":"already have a value. If a value exists in the storage then it is not used. In fact, the"},{"type":"text","text":" "},{"code":"wrappedValue","type":"codeVoice"},{"text":" argument of ","type":"text"},{"code":"Shared.init(wrappedValue:)","type":"codeVoice"},{"text":" is an","type":"text"},{"type":"text","text":" "},{"code":"@autoclosure","type":"codeVoice"},{"type":"text","text":" so that it is not even evaluated if not used. For that reason you"},{"text":" ","type":"text"},{"type":"text","text":"may prefer to make the argument to the initializer an "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" so that it too is evaluated"},{"text":" ","type":"text"},{"text":"only if actually used:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: @autoclosure () -> Int, \/* other fields *\/) {","    self._count = Shared(wrappedValue: count(), .appStorage(\"count\"))","    \/\/ other assignments","  }","}"]}],"type":"aside","style":"important","name":"Important"}]}]},{"anchor":"Deriving-shared-state","level":2,"text":"Deriving shared state","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"It is possible to derive shared state for sub-parts of an existing piece of shared state. For","type":"text"},{"type":"text","text":" "},{"text":"example, suppose you have a multi-step signup flow that uses ","type":"text"},{"type":"codeVoice","code":"Shared<SignUpData>"},{"type":"text","text":" in order to share"},{"type":"text","text":" "},{"type":"text","text":"data between each screen. However, some screens may not need all of "},{"type":"codeVoice","code":"SignUpData"},{"text":", but instead just a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"small part. The phone number confirmation screen may only need access to "},{"type":"codeVoice","code":"signUpData.phoneNumber"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and so that feature can hold onto just "},{"code":"Shared<String>","type":"codeVoice"},{"type":"text","text":" to express this fact:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer ","struct PhoneNumberFeature { ","  struct State {","    @Shared var phoneNumber: String","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"Then, when the parent feature constructs the "},{"code":"PhoneNumberFeature","type":"codeVoice"},{"text":" it can derive a small piece of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared state from "},{"type":"codeVoice","code":"Shared<SignUpData>"},{"type":"text","text":" to pass along:"}],"type":"paragraph"},{"syntax":"swift","code":["case .nextButtonTapped:","  state.path.append(","    PhoneNumberFeature.State(phoneNumber: state.$signUpData.phoneNumber)","  )"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we are using the projected value of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" value using "},{"type":"codeVoice","code":"$"},{"text":" syntax, ","type":"text"},{"type":"codeVoice","code":"$signUpData"},{"text":", and then","type":"text"},{"type":"text","text":" "},{"text":"further dot-chaining onto that projection to derive a ","type":"text"},{"type":"codeVoice","code":"Shared<String>"},{"type":"text","text":". This can be a powerful way"},{"type":"text","text":" "},{"type":"text","text":"for features to hold onto only the bare minimum of shared state it needs to do its job."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be instructive to think of "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" as the Composable Architecture analogue of "},{"type":"codeVoice","code":"@Bindable"},{"text":" ","type":"text"},{"type":"text","text":"in vanilla SwiftUI. You use it to express that the actual “source of truth” of the value lies"},{"text":" ","type":"text"},{"type":"text","text":"elsewhere, but you want to be able to read its most current value and write to it."}]},{"type":"paragraph","inlineContent":[{"text":"This also works for persistence strategies. If a parent feature holds onto a ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" piece of"},{"text":" ","type":"text"},{"type":"text","text":"state with a persistence strategy:"}]},{"syntax":"swift","code":["@Reducer","struct ParentFeature {","  struct State {","    @Shared(.fileStorage(.currentUser)) var currentUser","  }","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"…and a child feature wants access to just a shared ","type":"text"},{"inlineContent":[{"text":"piece","type":"text"}],"type":"emphasis"},{"type":"text","text":" of "},{"type":"codeVoice","code":"currentUser"},{"text":", such as their name,","type":"text"},{"type":"text","text":" "},{"text":"then they can do so by holding onto a simple, unadorned ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ChildFeature {","  struct State {","    @Shared var currentUserName: String","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then the parent can pass along "},{"type":"codeVoice","code":"$currentUser.name"},{"text":" to the child feature when constructing its","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state:"}]},{"code":["case .editNameButtonTapped:","  state.destination = .editName(","    EditNameFeature(name: state.$currentUser.name)","  )"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Any changes the child feature makes to its shared "},{"code":"name","type":"codeVoice"},{"type":"text","text":" will be automatically made to the parent’s"},{"text":" ","type":"text"},{"type":"text","text":"shared "},{"type":"codeVoice","code":"currentUser"},{"text":", and further those changes will be automatically persisted thanks to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":" persistence strategy used. This means the child feature gets to describe that it"},{"text":" ","type":"text"},{"type":"text","text":"needs access to shared state without describing the persistence strategy, and the parent can be"},{"type":"text","text":" "},{"type":"text","text":"responsible for persisting and deriving shared state to pass to the child."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your shared state is a collection, and in particular an "},{"code":"IdentifiedArray","type":"codeVoice"},{"type":"text","text":", then we have another"},{"text":" ","type":"text"},{"text":"tool for deriving shared state to a particular element of the array. You can subscript into a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" collection with the "},{"type":"codeVoice","code":"[id:]"},{"type":"text","text":" subscript, and that will give a piece of shared optional"},{"type":"text","text":" "},{"text":"state, which you can then unwrap to turn into honest shared state using a special ","type":"text"},{"code":"Shared","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":" "},{"text":"initializer:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []","","guard let todo = Shared($todos[id: todoID])","else { return }","todo \/\/ Shared<Todo>"]},{"level":2,"text":"Testing shared state","anchor":"Testing-shared-state","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Shared state behaves quite a bit different from the regular state held in Composable Architecture"},{"text":" ","type":"text"},{"text":"features. It is capable of being changed by any part of the application, not just when an action is","type":"text"},{"type":"text","text":" "},{"text":"sent to the store, and it has reference semantics rather than value semantics. Typically references","type":"text"},{"type":"text","text":" "},{"text":"cause serious problems with testing, especially exhaustive testing that the library prefers (see","type":"text"},{"text":" ","type":"text"},{"text":"doc:Testing","type":"text"},{"type":"text","text":"), because references cannot be copied and so one cannot inspect the changes"},{"type":"text","text":" "},{"text":"before and after an action is sent.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For this reason, the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper does extra work during testing to preserve a"},{"type":"text","text":" "},{"text":"previous snapshot of the state so that one can still exhaustively assert on shared state, even","type":"text"},{"type":"text","text":" "},{"type":"text","text":"though it is a reference."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For the most part, shared state can be tested just like any regular state held in your features. For"},{"text":" ","type":"text"},{"text":"example, consider the following simple counter feature that uses in-memory shared state for the","type":"text"},{"type":"text","text":" "},{"text":"count:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer ","struct Feature {","  struct State: Equatable {","    @Shared var count: Int","  }","  enum Action {","    case incrementButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"This feature can be tested in exactly the same way as when you are using non-shared state:","type":"text"}],"type":"paragraph"},{"code":["@Test","func increment() async {","  let store = TestStore(initialState: Feature.State(count: Shared(0))) {","    Feature()","  }","","  await store.send(.incrementButtonTapped) {","    $0.count = 1","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This test passes because we have described how the state changes. But even better, if we mutate the"},{"type":"text","text":" "},{"code":"count","type":"codeVoice"},{"type":"text","text":" incorrectly:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Test","func increment() async {","  let store = TestStore(initialState: Feature.State(count: Shared(0))) {","    Feature()","  }","","  await store.send(.incrementButtonTapped) {","    $0.count = 2","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"…we immediately get a test failure letting us know exactly what went wrong:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["❌ State was not expected to change, but a change occurred: …","","    − Feature.State(_count: 2)","    + Feature.State(_count: 1)","","(Expected: −, Actual: +)"]},{"inlineContent":[{"type":"text","text":"This works even though the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" count is a reference type. The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" "},{"type":"text","text":"type work in unison to snapshot the state before and after the action is sent, allowing us to still"},{"type":"text","text":" "},{"type":"text","text":"assert in an exhaustive manner."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, exhaustively testing shared state is more complicated than testing non-shared state in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"features. Shared state can be captured in effects and mutated directly, without ever sending an"},{"type":"text","text":" "},{"type":"text","text":"action into system. This is in stark contrast to regular state, which can only ever be mutated when"},{"type":"text","text":" "},{"text":"sending an action.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, it is possible to alter the "},{"type":"codeVoice","code":"incrementButtonTapped"},{"type":"text","text":" action so that it captures the"},{"text":" ","type":"text"},{"type":"text","text":"shared state in an effect, and then increments from the effect:"}],"type":"paragraph"},{"code":["case .incrementButtonTapped:","  return .run { [sharedCount = state.$count] _ in","    await sharedCount.withLock { $0 += 1 }","  }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The only reason this is possible is because "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" state is reference-like, and hence can"},{"type":"text","text":" "},{"type":"text","text":"technically be mutated from anywhere."}],"type":"paragraph"},{"inlineContent":[{"text":"However, how does this affect testing? Since the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" is no longer incremented directly in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the reducer we can drop the trailing closure from the test store assertion:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Test","func increment() async {","  let store = TestStore(initialState: SimpleFeature.State(count: Shared(0))) {","    SimpleFeature()","  }","  await store.send(.incrementButtonTapped)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is technically correct, but we aren’t testing the behavior of the effect at all."}]},{"inlineContent":[{"type":"text","text":"Luckily the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" has our back. If you run this test you will immediately get a failure"},{"type":"text","text":" "},{"type":"text","text":"letting you know that the shared count was mutated but we did not assert on the changes:"}],"type":"paragraph"},{"code":["❌ Tracked changes to 'Shared<Int>@MyAppTests\/FeatureTests.swift:10' but failed to assert: …","","  − 0","  + 1","","(Before: −, After: +)","","Call 'Shared<Int>.assert' to exhaustively test these changes, or call 'skipChanges' to ignore them."],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In order to get this test passing we have to explicitly assert on the shared counter state at"},{"type":"text","text":" "},{"text":"the end of the test, which we can do using the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:fileID:file:line:column:)"},{"text":" ","type":"text"},{"type":"text","text":"method:"}],"type":"paragraph"},{"code":["@Test","func increment() async {","  let store = TestStore(initialState: SimpleFeature.State(count: Shared(0))) {","    SimpleFeature()","  }","  await store.send(.incrementButtonTapped)","  store.assert {","    $0.count = 1","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the test passes."}]},{"type":"paragraph","inlineContent":[{"text":"So, even though the ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" type opens our application up to a little bit more uncertainty due","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to its reference semantics, it is still possible to get exhaustive test coverage on its changes."}]},{"anchor":"Testing-when-using-persistence","level":4,"type":"heading","text":"Testing when using persistence"},{"type":"paragraph","inlineContent":[{"text":"It is also possible to test when using one of the persistence strategies provided by the library,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which are "},{"type":"codeVoice","code":"appStorage"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"fileStorage","type":"codeVoice"},{"text":". Typically persistence is difficult to test because the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"persisted data bleeds over from test to test, making it difficult to exhaustively prove how each"},{"text":" ","type":"text"},{"text":"test behaves in isolation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But the "},{"type":"codeVoice","code":".appStorage"},{"text":" and ","type":"text"},{"type":"codeVoice","code":".fileStorage"},{"text":" strategies do extra work to make sure that happens. By","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"default the "},{"code":".appStorage","type":"codeVoice"},{"type":"text","text":" strategy uses a non-persisting user defaults so that changes are not"},{"type":"text","text":" "},{"type":"text","text":"actually persisted across test runs. And the "},{"code":".fileStorage","type":"codeVoice"},{"type":"text","text":" strategy uses a mock file system so that"},{"type":"text","text":" "},{"type":"text","text":"changes to state are not actually persisted to the file system."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that if we altered the "},{"code":"SimpleFeature","type":"codeVoice"},{"type":"text","text":" of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Testing-shared-state","isActive":true},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"section above to use app storage:"}]},{"type":"codeListing","syntax":"swift","code":["struct State: Equatable {","  @Shared(.appStorage(\"count\")) var count: Int","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…then the test for this feature can be written in the same way as before and will still pass."}]},{"type":"heading","level":4,"anchor":"Testing-when-using-custom-persistence-strategies","text":"Testing when using custom persistence strategies"},{"inlineContent":[{"type":"text","text":"When creating your own custom persistence strategies you must careful to do so in a style that"},{"text":" ","type":"text"},{"type":"text","text":"is amenable to testing. For example, the "},{"type":"codeVoice","code":"appStorage"},{"text":" persistence","type":"text"},{"type":"text","text":" "},{"text":"strategy that comes with the library injects a ","type":"text"},{"type":"codeVoice","code":"defaultAppStorage"},{"text":" ","type":"text"},{"text":"dependency so that one can inject a custom ","type":"text"},{"code":"UserDefaults","type":"codeVoice"},{"type":"text","text":" in order to execute in a controlled"},{"text":" ","type":"text"},{"type":"text","text":"environment. By default "},{"code":"defaultAppStorage","type":"codeVoice"},{"type":"text","text":" uses a non-persisting"},{"type":"text","text":" "},{"text":"user defaults, but you can also customize it to use any kind of defaults.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Similarly the ","type":"text"},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" persistence strategy uses an internal"},{"type":"text","text":" "},{"type":"text","text":"dependency for changing how files are written to the disk and loaded from disk. In tests the"},{"type":"text","text":" "},{"type":"text","text":"dependency will forgo any interaction with the file system and instead write data to a "},{"type":"codeVoice","code":"[URL: Data]"},{"type":"text","text":" "},{"type":"text","text":"dictionary, and load data from that dictionary. That emulates how the file system works, but without"},{"type":"text","text":" "},{"type":"text","text":"persisting any data to the global file system, which can bleed over into other tests."}],"type":"paragraph"},{"type":"heading","text":"Overriding shared state in tests","level":4,"anchor":"Overriding-shared-state-in-tests"},{"inlineContent":[{"type":"text","text":"When testing features that use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" with a persistence strategy you may want to set the initial"},{"type":"text","text":" "},{"type":"text","text":"value of that state for the test. Typically this can be done by declaring the shared state at"},{"text":" ","type":"text"},{"type":"text","text":"the beginning of the test so that its default value can be specified:"}],"type":"paragraph"},{"syntax":"swift","code":["@Test","func basics() {","  @Shared(.appStorage(\"count\")) var count = 42","","  \/\/ Shared state will be 42 for all features using it.","  let store = TestStore(…)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"However, if your test suite is a part of an app target, then the entry point of the app will execute","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and potentially cause an early access of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":", thus capturing a different default value than"},{"type":"text","text":" "},{"type":"text","text":"what is specified above. This quirk of tests in app targets is documented in"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","type":"reference","isActive":true},{"type":"text","text":" of the "},{"text":"doc:Testing","type":"text"},{"type":"text","text":" article, and a similar quirk"},{"text":" ","type":"text"},{"text":"exists for Xcode previews and is discussed below in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Gotchas-of-Shared"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most robust workaround to this issue is to simply not execute your app’s entry point when tests"},{"type":"text","text":" "},{"type":"text","text":"are running, which we detail in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-host-application","isActive":true,"type":"reference"},{"type":"text","text":". This makes it so that you"},{"type":"text","text":" "},{"type":"text","text":"are not accidentally execute network requests, tracking analytics, etc. while running tests."}]},{"inlineContent":[{"type":"text","text":"You can also work around this issue by simply setting the shared state again after initializing"},{"type":"text","text":" "},{"text":"it:","type":"text"}],"type":"paragraph"},{"code":["@Test","func basics() {","  @Shared(.appStorage(\"count\")) var count = 42","  count = 42  \/\/ NB: Set again to override any value set by the app target.","","  \/\/ Shared state will be 42 for all features using it.","  let store = TestStore(…)","}"],"syntax":"swift","type":"codeListing"},{"text":"UI Testing","level":4,"anchor":"UI-Testing","type":"heading"},{"inlineContent":[{"text":"When UI testing your app you must take extra care so that shared state is not persisted across","type":"text"},{"type":"text","text":" "},{"text":"app runs because that can cause one test to bleed over into another test, making it difficult to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"write deterministic tests that always pass. To fix this, you can set an environment value from"},{"text":" ","type":"text"},{"text":"your UI test target, and then if that value is present in the app target you can override the","type":"text"},{"type":"text","text":" "},{"code":"defaultAppStorage","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"defaultFileStorage","type":"codeVoice"},{"type":"text","text":" dependencies so that they use in-memory"},{"type":"text","text":" "},{"type":"text","text":"storage, i.e. they do not persist ever:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@main","struct EntryPoint: App {","  let store = Store(initialState: AppFeature.State()) {","    AppFeature()","  } withDependencies: {","    if ProcessInfo.processInfo.environment[\"UITesting\"] == \"true\" {","      $0.defaultAppStorage = UserDefaults(","        suiteName:\"\\(NSTemporaryDirectory())\\(UUID().uuidString)\"","      )!","      $0.defaultFileStorage = .inMemory","    }","  }","}"]},{"anchor":"Testing-tips","level":4,"text":"Testing tips","type":"heading"},{"inlineContent":[{"text":"There is something you can do to make testing features with shared state more robust and catch","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"more potential future problems when you refactor your code. Right now suppose you have two features"},{"type":"text","text":" "},{"text":"using ","type":"text"},{"type":"codeVoice","code":"@Shared(.appStorage(\"count\"))"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature1 {","  struct State {","    @Shared(.appStorage(\"count\")) var count = 0","  }","  \/\/ ...","}","","@Reducer","struct Feature2 {","  struct State {","    @Shared(.appStorage(\"count\")) var count = 0","  }","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And suppose you wrote a test that proves one of these counts is incremented when a button is tapped:"}]},{"code":["await store.send(.feature1(.buttonTapped)) {","  $0.feature1.count = 1","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because both features are using "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" you can be sure that both counts are kept in sync, and"},{"text":" ","type":"text"},{"text":"so you do not need to assert on ","type":"text"},{"type":"codeVoice","code":"feature2.count"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"However, if someday during a long, complex refactor you accidentally removed ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" from"},{"type":"text","text":" "},{"text":"the second feature:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature2 {","  struct State {","    var count = 0","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"…then all of your code would continue compiling, and the test would still pass, but you may have","type":"text"},{"type":"text","text":" "},{"type":"text","text":"introduced a bug by not having these two pieces of state in sync anymore."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You could also fix this by forcing yourself to assert on all shared state in your features, even"},{"text":" ","type":"text"},{"type":"text","text":"though technically it’s not necessary:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.feature1(.buttonTapped)) {","  $0.feature1.count = 1","  $0.feature2.count = 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are worried about these kinds of bugs you can make your tests more robust by not asserting"},{"type":"text","text":" "},{"type":"text","text":"on the shared state in the argument handed to the trailing closure of "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"send"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"text":"instead capture a reference to the shared state in the test and mutate it in the trailing","type":"text"},{"type":"text","text":" "},{"text":"closure:","type":"text"}]},{"type":"codeListing","code":["@Test","func increment() async {","  @Shared(.appStorage(\"count\")) var count = 0","  let store = TestStore(initialState: ParentFeature.State()) {","    ParentFeature()","  }","","  await store.send(.feature1(.buttonTapped)) {","    \/\/ Mutate $0 to expected value.","    count = 1","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This will fail if you accidentally remove a "},{"type":"codeVoice","code":"@Shared"},{"text":" from one of your features.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Further, you can enforce this pattern in your codebase by making all ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" properties","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" so that they can never be mutated outside their file scope:"}],"type":"paragraph"},{"code":["struct State {","  @Shared(.appStorage(\"count\")) fileprivate var count = 0","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","text":"Read-only shared state","anchor":"Read-only-shared-state"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper described above gives you access to a piece of shared"},{"text":" ","type":"text"},{"text":"state that is both readable and writable. That is by far the most common use case when it comes to","type":"text"},{"text":" ","type":"text"},{"text":"shared state, but there are times when one wants to express access to shared state for which you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are not allowed to write to it, or possibly it doesn’t even make sense to write to it."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For those times there is the "},{"type":"codeVoice","code":"@SharedReader"},{"type":"text","text":" property wrapper. It represents"},{"type":"text","text":" "},{"type":"text","text":"a reference to some piece of state shared with multiple parts of the application, but you are not"},{"type":"text","text":" "},{"text":"allowed to write to it. Every persistence strategy discussed above works with ","type":"text"},{"type":"codeVoice","code":"SharedReader"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"however if you try to mutate the state you will get a compiler error:"}]},{"code":["@SharedReader(.appStorage(\"isOn\")) var isOn = false","isOn = true  \/\/ 🛑"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to make custom persistence strategies that only have the notion of loading and"},{"text":" ","type":"text"},{"text":"subscribing, but cannot write. To do this you will conform only to the ","type":"text"},{"type":"codeVoice","code":"SharedReaderKey"},{"text":" ","type":"text"},{"text":"protocol instead of the full ","type":"text"},{"code":"SharedKey","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"inlineContent":[{"text":"For example, you could create a ","type":"text"},{"type":"codeVoice","code":".remoteConfig"},{"text":" strategy that loads (and subscribes to) a remote","type":"text"},{"type":"text","text":" "},{"text":"configuration file held on your server so that it is kept automatically in sync:","type":"text"}],"type":"paragraph"},{"code":["@SharedReader(.remoteConfig) var remoteConfig"],"type":"codeListing","syntax":"swift"},{"anchor":"Type-safe-keys","type":"heading","level":2,"text":"Type-safe keys"},{"inlineContent":[{"text":"Due to the nature of persisting data to external systems, you lose some type safety when shuffling","type":"text"},{"type":"text","text":" "},{"type":"text","text":"data from your app to the persistence storage and back. For example, if you are using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" strategy to save an array of users to disk you might do so"},{"text":" ","type":"text"},{"text":"like this:","type":"text"}],"type":"paragraph"},{"code":["extension URL {","  static let users = URL(\/* ... *\/))","}","","@Shared(.fileStorage(.users)) var users: [User] = []"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And say you have used this file storage users in multiple places throughout your application."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"But then, someday in the future you may decide to refactor this data to be an identified array","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead of a plain array:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ Somewhere else in the application","@Shared(.fileStorage(.users)) var users: IdentifiedArrayOf<User> = []"]},{"inlineContent":[{"text":"But if you forget to convert ","type":"text"},{"inlineContent":[{"type":"text","text":"all"}],"type":"emphasis"},{"type":"text","text":" shared user arrays to the new identified array your application"},{"type":"text","text":" "},{"type":"text","text":"will still compile, but it will be broken. The two types of storage will not share state."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To add some type-safety and reusability to this process you can extend the ","type":"text"},{"code":"SharedReaderKey","type":"codeVoice"},{"text":" ","type":"text"},{"text":"protocol to add a static variable for describing the details of your persistence:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension SharedReaderKey where Self == FileStorageKey<IdentifiedArrayOf<User>> {","  static var users: Self {","    fileStorage(.users)","  }","}"]},{"inlineContent":[{"type":"text","text":"Then when using "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" you can specify this key directly without "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Shared(.users) var users: IdentifiedArrayOf<User> = []"]},{"inlineContent":[{"text":"And now that the type is baked into the key you cannot accidentally use the wrong type because you","type":"text"},{"type":"text","text":" "},{"text":"will get an immediate compiler error:","type":"text"}],"type":"paragraph"},{"code":["@Shared(.users) var users = [User]()"],"type":"codeListing","syntax":"swift"},{"style":"note","content":[{"inlineContent":[{"text":"Cannot convert value of type ‘[User]’ to expected argument type ‘IdentifiedArrayOf","type":"text"},{"type":"text","text":"’"}],"type":"paragraph"}],"name":"🛑 Error","type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique works for all types of persistence strategies. For example, a type-safe "},{"code":".inMemory","type":"codeVoice"},{"type":"text","text":" "},{"text":"key can be constructed like so:","type":"text"}]},{"code":["extension SharedReaderKey where Self == InMemoryKey<IdentifiedArrayOf<User>> {","  static var users: Self {","    inMemory(\"users\")","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And a type-safe ","type":"text"},{"type":"codeVoice","code":".appStorage"},{"text":" key can be constructed like so:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["extension SharedReaderKey where Self == AppStorageKey<Int> {","  static var count: Self {","    appStorage(\"count\")","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And this technique also works on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","overridingTitle":"custom persistence","overridingTitleInlineContent":[{"type":"text","text":"custom persistence"}],"type":"reference","isActive":true},{"text":" ","type":"text"},{"text":"strategies.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, you can also bake in the default of the shared value into your key by doing the following:"}]},{"type":"codeListing","syntax":"swift","code":["extension SharedReaderKey where Self == FileStorageKey<IdentifiedArrayOf<User>>.Default {","  static var users: Self {","    Self[.fileStorage(.users), default: []]","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"And now anytime you reference the shared users state you can leave off the default value, and","type":"text"},{"type":"text","text":" "},{"text":"you can even leave off the type annotation:","type":"text"}]},{"code":["@Shared(.users) var users"],"type":"codeListing","syntax":"swift"},{"anchor":"Shared-state-in-pre-observation-apps","text":"Shared state in pre-observation apps","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" in features that have not yet been updated with"},{"text":" ","type":"text"},{"type":"text","text":"the observation tools released in 1.7, such as the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro. In the reducer"},{"type":"text","text":" "},{"text":"you can use ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" regardless of your use of the observation tools.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you are deploying to iOS 16 or earlier, then you must use "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" "},{"type":"text","text":"in your views if you are accessing shared state. For example, the following view:"}]},{"code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    Form {","      Text(store.sharedCount.description)","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"…will not update properly when "},{"type":"codeVoice","code":"sharedCount"},{"type":"text","text":" changes. This view will even generate a runtime warning"},{"text":" ","type":"text"},{"type":"text","text":"letting you know something is wrong:"}],"type":"paragraph"},{"type":"aside","name":"🟣 Runtime Warning","style":"note","content":[{"inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"text":" ","type":"text"},{"text":"state by wrapping your view in a ‘WithPerceptionTracking’ view.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"The fix is to wrap the body of the view in ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(store.sharedCount.description)","      }","    }","  }","}"]},{"text":"Concurrent mutations to shared state","level":2,"anchor":"Concurrent-mutations-to-shared-state","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the "},{"text":"`@Shared`","type":"text"},{"type":"text","text":" property wrapper makes it possible to treat shared state"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"mostly"}],"type":"emphasis"},{"type":"text","text":" like regular state, you do have to perform some extra steps to mutate shared state."},{"text":" ","type":"text"},{"type":"text","text":"This is because shared state is technically a reference deep down, even"},{"type":"text","text":" "},{"text":"though we take extra steps to make it appear value-like. And this means it’s possible to mutate the","type":"text"},{"type":"text","text":" "},{"text":"same piece of shared state from multiple threads, and hence race conditions are possible.","type":"text"}]},{"inlineContent":[{"text":"To mutate a piece of shared state in an isolated fashion, use the ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" method","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defined on the "},{"type":"codeVoice","code":"@Shared"},{"text":" projected value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["state.$count.withLock { $0 += 1 }"]},{"type":"paragraph","inlineContent":[{"text":"That locks the entire unit of work of reading the current count, incrementing it, and storing it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"type":"codeListing","code":["let currentCount = state.count","state.$count.withLock { $0 = currentCount + 1 }"],"syntax":"swift"},{"inlineContent":[{"text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to","type":"text"},{"type":"text","text":" "},{"text":"problems due to re-entrancy. To avoid problems like the above we recommend wrapping as many","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutations of the shared state as possible in a single "},{"type":"codeVoice","code":"withLock"},{"text":". That will make","type":"text"},{"text":" ","type":"text"},{"text":"sure that the full unit of work is guarded by a lock.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Gotchas of @Shared","type":"heading","anchor":"Gotchas-of-Shared"},{"inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using shared state in the Composable Architecture."}],"type":"paragraph"},{"type":"heading","text":"Hashability","anchor":"Hashability","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" type is equatable based on its wrapped value, and because the value is held"},{"type":"text","text":" "},{"text":"in a reference and can change over time, it cannot be hashable. This also means that types","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"containing "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" properties should not compute their hashes from shared values."}]},{"text":"Codability","type":"heading","anchor":"Codability","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" type is not conditionally encodable or decodable because the source of truth of the"},{"type":"text","text":" "},{"type":"text","text":"wrapped value is rarely local: it might be derived from some other shared value, or it might rely on"},{"text":" ","type":"text"},{"type":"text","text":"loading the value from a backing persistence strategy."}]},{"inlineContent":[{"type":"text","text":"When introducing shared state to a data type that is encodable or decodable, you must provide your"},{"type":"text","text":" "},{"type":"text","text":"own implementations of "},{"code":"encode(to:)","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" that do the appropriate thing."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if the data type is sharing state with a persistence strategy, you can decode by","type":"text"},{"text":" ","type":"text"},{"text":"delegating to the memberwise initializer that implicitly loads the shared value from the property","type":"text"},{"text":" ","type":"text"},{"text":"wrapper’s persistence strategy, or you can explicitly initialize a shared value. And for encoding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you can often skip encoding the shared value:"}]},{"type":"codeListing","syntax":"swift","code":["struct AppState {","  @Shared(.appStorage(\"launchCount\")) var launchCount = 0","  var todos: [String] = []","}","","extension AppState: Codable {","  enum CodingKeys: String, CodingKey { case todos }","","  init(from decoder: any Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","","    \/\/ Use the property wrapper default via the memberwise initializer:","    try self.init(","      todos: container.decode([String].self, forKey: .todos)","    )","","    \/\/ Or initialize the shared storage manually:","    self._launchCount = Shared(wrappedValue: 0, .appStorage(\"launchCount\"))","    self.todos = try container.decode([String].self, forKey: .todos)","  }","","  func encode(to encoder: any Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(self.todos, forKey: .todos)","    \/\/ Skip encoding the launch count.","  }","}"]},{"level":4,"anchor":"Previews","text":"Previews","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When a preview is run in an app target, the entry point is also created. This means if your entry"},{"type":"text","text":" "},{"type":"text","text":"point looks something like this:"}]},{"type":"codeListing","code":["@main","struct MainApp: App {","  let store = Store(…)","","  var body: some Scene {","    …","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"…then a store will be created each time you run your preview. This can be problematic with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" "},{"type":"text","text":"and persistence strategies because the first access of a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property will use the default"},{"text":" ","type":"text"},{"text":"value provided, and that will cause ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":"’s created later to ignore the default. That will mean"},{"type":"text","text":" "},{"type":"text","text":"you cannot override shared state in previews."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The fix is to delay creation of the store until the entry point’s ","type":"text"},{"type":"codeVoice","code":"body"},{"text":" is executed. Further, it","type":"text"},{"type":"text","text":" "},{"text":"can be a good idea to also not run the ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" when in tests because that can also interfere with"},{"text":" ","type":"text"},{"type":"text","text":"tests (as documented in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","isActive":true},{"text":"). Here is one way this can be accomplished:","type":"text"}]},{"code":["import ComposableArchitecture","import SwiftUI","","@main","struct MainApp: App {","  @MainActor","  static let store = Store(…)","","  var body: some Scene {","    WindowGroup {","      if isTesting {","        \/\/ NB: Don't run application in tests to avoid interference ","        \/\/     between the app and the test.","        EmptyView()","      } else {","        AppView(store: Self.store)","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can take an extra step to override shared state in your previews:"}]},{"code":["#Preview {","  @Shared(.appStorage(\"isOn\")) var isOn = true","  isOn = true","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The second assignment of "},{"code":"isOn","type":"codeVoice"},{"type":"text","text":" will guarantee that it holds a value of "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"metadata":{"title":"Sharing state","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","role":"article"},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"seeAlsoSections":[{"title":"Essentials","anchor":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ"],"generated":true}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/sharingstate"]}],"references":{"#Shared-state-in-pre-observation-apps":{"url":"#Shared-state-in-pre-observation-apps","title":"Shared state in pre-observation apps","identifier":"#Shared-state-in-pre-observation-apps","titleInlineContent":[{"type":"text","text":"Shared state in pre-observation apps"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Read-only-shared-state":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Read-only-shared-state","title":"Read-only shared state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Read-only-shared-state","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"url":"\/documentation\/composablearchitecture\/navigation","title":"Navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FAQ":{"title":"Frequently asked questions","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ","abstract":[{"type":"text","text":"A collection of some of the most common questions and comments people have concerning the library."}],"url":"\/documentation\/composablearchitecture\/faq","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Testing-gotchas":{"kind":"section","url":"\/documentation\/composablearchitecture\/testing#Testing-gotchas","title":"Testing gotchas","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Custom-persistence":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Custom-persistence","title":"Custom persistence","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","abstract":[],"type":"topic"},"#Type-safe-keys":{"url":"#Type-safe-keys","title":"Type-safe keys","identifier":"#Type-safe-keys","titleInlineContent":[{"type":"text","text":"Type-safe keys"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Testing-host-application":{"kind":"section","url":"\/documentation\/composablearchitecture\/testing#Testing-host-application","title":"Testing host application","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-host-application","abstract":[],"type":"topic"},"https://github.com/pointfreeco/swift-sharing":{"url":"https:\/\/github.com\/pointfreeco\/swift-sharing","title":"Sharing","identifier":"https:\/\/github.com\/pointfreeco\/swift-sharing","titleInlineContent":[{"type":"text","text":"Sharing"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Testing-shared-state":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Testing-shared-state","title":"Testing shared state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Testing-shared-state","abstract":[],"type":"topic"},"#Testing-tips":{"url":"#Testing-tips","title":"Testing tips","identifier":"#Testing-tips","titleInlineContent":[{"type":"text","text":"Testing tips"}],"type":"link"},"#User-defaults":{"url":"#User-defaults","title":"User defaults","identifier":"#User-defaults","titleInlineContent":[{"type":"text","text":"User defaults"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies","kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"text":"any reducer.","type":"text"}],"role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"abstract":[{"text":"Learn how to improve the performance of features built in the Composable Architecture.","type":"text"}],"type":"topic","kind":"article","title":"Performance","url":"\/documentation\/composablearchitecture\/performance","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"url":"\/documentation\/composablearchitecture","role":"collection","kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"kind":"symbol","title":"ObservableState()","url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"type":"topic"},"#Testing-when-using-persistence":{"url":"#Testing-when-using-persistence","title":"Testing when using persistence","identifier":"#Testing-when-using-persistence","titleInlineContent":[{"type":"text","text":"Testing when using persistence"}],"type":"link"},"#Overriding-shared-state-in-tests":{"url":"#Overriding-shared-state-in-tests","title":"Overriding shared state in tests","identifier":"#Overriding-shared-state-in-tests","titleInlineContent":[{"type":"text","text":"Overriding shared state in tests"}],"type":"link"},"#Explicit-shared-state":{"url":"#Explicit-shared-state","title":"Explicit shared state","identifier":"#Explicit-shared-state","titleInlineContent":[{"type":"text","text":"Explicit shared state"}],"type":"link"},"#Testing-when-using-custom-persistence-strategies":{"url":"#Testing-when-using-custom-persistence-strategies","title":"Testing when using custom persistence strategies","identifier":"#Testing-when-using-custom-persistence-strategies","titleInlineContent":[{"type":"text","text":"Testing when using custom persistence strategies"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Gotchas-of-Shared":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Gotchas-of-Shared","title":"Gotchas of @Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Gotchas-of-Shared","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"title":"Getting started","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","abstract":[{"text":"Learn how to integrate the Composable Architecture into your project and write your first","type":"text"},{"type":"text","text":" "},{"text":"application.","type":"text"}],"url":"\/documentation\/composablearchitecture\/gettingstarted","kind":"article"},"#Custom-persistence":{"url":"#Custom-persistence","title":"Custom persistence","identifier":"#Custom-persistence","titleInlineContent":[{"type":"text","text":"Custom persistence"}],"type":"link"},"#UI-Testing":{"url":"#UI-Testing","title":"UI Testing","identifier":"#UI-Testing","titleInlineContent":[{"type":"text","text":"UI Testing"}],"type":"link"},"#Initialization-rules":{"url":"#Initialization-rules","title":"Initialization rules","identifier":"#Initialization-rules","titleInlineContent":[{"type":"text","text":"Initialization rules"}],"type":"link"},"#Read-only-shared-state":{"url":"#Read-only-shared-state","title":"Read-only shared state","identifier":"#Read-only-shared-state","titleInlineContent":[{"type":"text","text":"Read-only shared state"}],"type":"link"},"#Observing-changes-to-shared-state":{"url":"#Observing-changes-to-shared-state","title":"Observing changes to shared state","identifier":"#Observing-changes-to-shared-state","titleInlineContent":[{"type":"text","text":"Observing changes to shared state"}],"type":"link"},"#Gotchas-of-Shared":{"url":"#Gotchas-of-Shared","title":"Gotchas of @Shared","identifier":"#Gotchas-of-Shared","titleInlineContent":[{"type":"text","text":"Gotchas of @Shared"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore","type":"topic","role":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}]},"#Deriving-shared-state":{"url":"#Deriving-shared-state","title":"Deriving shared state","identifier":"#Deriving-shared-state","titleInlineContent":[{"type":"text","text":"Deriving shared state"}],"type":"link"},"#Concurrent-mutations-to-shared-state":{"url":"#Concurrent-mutations-to-shared-state","title":"Concurrent mutations to shared state","identifier":"#Concurrent-mutations-to-shared-state","titleInlineContent":[{"type":"text","text":"Concurrent mutations to shared state"}],"type":"link"},"#File-storage":{"url":"#File-storage","title":"File storage","identifier":"#File-storage","titleInlineContent":[{"type":"text","text":"File storage"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/assert(_:fileID:file:line:column:)":{"url":"\/documentation\/composablearchitecture\/teststore\/assert(_:fileid:file:line:column:)","title":"assert(_:fileID:file:line:column:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"Assert against the current state of the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/assert(_:fileID:file:line:column:)","type":"topic","kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"assert"},{"kind":"text","text":"(("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}]},"#Persisted-shared-state":{"url":"#Persisted-shared-state","title":"Persisted shared state","identifier":"#Persisted-shared-state","titleInlineContent":[{"type":"text","text":"Persisted shared state"}],"type":"link"},"#Source-of-truth":{"url":"#Source-of-truth","title":"“Source of truth”","identifier":"#Source-of-truth","titleInlineContent":[{"type":"text","text":"“Source of truth”"}],"type":"link"},"#In-memory":{"url":"#In-memory","title":"In-memory","identifier":"#In-memory","titleInlineContent":[{"type":"text","text":"In-memory"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"url":"\/documentation\/composablearchitecture\/reducer\/state","title":"State","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}],"abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"required":true},"#Testing-shared-state":{"url":"#Testing-shared-state","title":"Testing shared state","identifier":"#Testing-shared-state","titleInlineContent":[{"type":"text","text":"Testing shared state"}],"type":"link"}}}