{"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The testability of features built in the Composable Architecture is the #1 priority of the library."},{"text":" ","type":"text"},{"text":"It should be possible to test not only how state changes when actions are sent into the store, but","type":"text"},{"text":" ","type":"text"},{"text":"also how effects are executed and feed data back into the system.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"#Testing-state-changes","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-effects"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Non-exhaustive-testing","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Testing-gotchas","isActive":true}],"type":"paragraph"}]}]},{"level":2,"anchor":"Testing-state-changes","type":"heading","text":"Testing state changes"},{"inlineContent":[{"type":"text","text":"State changes are by far the simplest thing to test in features built with the library. A"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":"’s first responsibility is to mutate the current state based on the action received into"},{"text":" ","type":"text"},{"text":"the system. To test this we can technically run a piece of mutable state through the reducer and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then assert on how it changed after, like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case incrementButtonTapped","    case decrementButtonTapped","  }","  var body: some Reduce<State, Action> {","    Reduce { state, action in","      switch action {","      case .incrementButtonTapped:","        state.count += 1","        return .none","      case .decrementButtonTapped:","        state.count -= 1","        return .none","      }","    }","  }","}","","@Test","func basics() {","  let feature = Feature()","  var currentState = Feature.State(count: 0)","  _ = feature.reduce(into: &currentState, action: .incrementButtonTapped)","  #expect(currentState == State(count: 1))","","  _ = feature.reduce(into: &currentState, action: .decrementButtonTapped)","  #expect(currentState == State(count: 0))","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will technically work, but it’s a lot boilerplate for something that should be quite simple."}]},{"type":"paragraph","inlineContent":[{"text":"The library comes with a tool specifically designed to make testing like this much simpler and more","type":"text"},{"type":"text","text":" "},{"text":"concise. It’s called ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":", and it is constructed similarly to "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" by providing the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"initial state of the feature and the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":" that runs the feature’s logic:"}]},{"type":"codeListing","syntax":"swift","code":["import Testing","","@MainActor","struct CounterTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: Feature.State(count: 0)) {","      Feature()","    }","  }","}"]},{"type":"aside","name":"Tip","style":"tip","content":[{"inlineContent":[{"type":"text","text":"Tests that use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":" should be marked as ","type":"text"},{"type":"codeVoice","code":"async"},{"type":"text","text":" since most assertion helpers on"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" can suspend. And while tests do not "},{"type":"emphasis","inlineContent":[{"type":"text","text":"require"}]},{"text":" the main actor, ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" "},{"inlineContent":[{"text":"is","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"main actor-isolated, and so we recommend annotating your tests and suites with "},{"type":"codeVoice","code":"@MainActor"},{"text":".","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"Test stores have a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","isActive":true},{"type":"text","text":" method, but it behaves differently from"},{"text":" ","type":"text"},{"type":"text","text":"stores and view stores. You provide an action to send into the system, but then you must also"},{"type":"text","text":" "},{"text":"provide a trailing closure to describe how the state of the feature changed after sending the","type":"text"},{"text":" ","type":"text"},{"text":"action:","type":"text"}],"type":"paragraph"},{"code":["await store.send(.incrementButtonTapped) {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This closure is handed a mutable variable that represents the state of the feature "},{"inlineContent":[{"text":"before","type":"text"}],"type":"emphasis"},{"type":"text","text":" sending"},{"type":"text","text":" "},{"type":"text","text":"the action, and it is your job to make the appropriate mutations to it to get it into the shape"},{"type":"text","text":" "},{"text":"it should be after sending the action:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["await store.send(.incrementButtonTapped) {","  $0.count = 1","}"],"syntax":"swift"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","isActive":true,"type":"reference"},{"text":" method is ","type":"text"},{"code":"async","type":"codeVoice"},{"type":"text","text":" for technical reasons that we"},{"type":"text","text":" "},{"text":"do not have to worry about right now.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"text":"If your mutation is incorrect, meaning you perform a mutation that is different from what happened","type":"text"},{"text":" ","type":"text"},{"text":"in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":", then you will get a test failure with a nicely formatted message showing exactly"},{"type":"text","text":" "},{"type":"text","text":"what part of the state does not match:"}],"type":"paragraph"},{"syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 999","}"],"type":"codeListing"},{"name":"❌ Failure","style":"note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}],"type":"paragraph"},{"syntax":"diff","code":["- TestStoreTests.State(count: 999)","+ TestStoreTests.State(count: 1)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"(Expected: −, Actual: +)"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"You can also send multiple actions to emulate a script of user actions and assert each step of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"way how the state evolved:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 1","}","await store.send(.incrementButtonTapped) {","  $0.count = 2","}","await store.send(.decrementButtonTapped) {","  $0.count = 1","}"]},{"style":"tip","type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically we could have written the mutation block in the following manner:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count += 1","}","await store.send(.decrementButtonTapped) {","  $0.count -= 1","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and the test would have still passed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this does not produce as strong of an assertion. It shows that the count did increment"},{"text":" ","type":"text"},{"type":"text","text":"by one, but we haven’t proven we know the precise value of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" at each step of the way."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In general, the less logic you have in the trailing closure of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","isActive":true},{"type":"text","text":", the stronger your assertion will be. It is best to"},{"type":"text","text":" "},{"type":"text","text":"use simple, hard-coded data for the mutation."}]}]},{"type":"paragraph","inlineContent":[{"text":"Test stores do expose a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","isActive":true,"type":"reference"},{"text":" property, which can be useful for performing assertions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on computed properties you might have defined on your state. For example, if "},{"code":"State","type":"codeVoice"},{"text":" had a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"computed property for checking if "},{"code":"count","type":"codeVoice"},{"type":"text","text":" was prime, we could test it like so:"}]},{"type":"codeListing","syntax":"swift","code":["store.send(.incrementButtonTapped) {","  $0.count = 3","}","XCTAssertTrue(store.state.isPrime)"]},{"inlineContent":[{"text":"However, when inside the trailing closure of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":", the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","isActive":true},{"text":" property is equal to the state ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"before","type":"text"}]},{"type":"text","text":" sending the action, not after. That"},{"type":"text","text":" "},{"text":"prevents you from being able to use an escape hatch to get around needing to actually describe the","type":"text"},{"text":" ","type":"text"},{"text":"state mutation, like so:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.send(.incrementButtonTapped) {","  $0 = store.state  \/\/ ❌ store.state is the previous, not current, state.","}"],"syntax":"swift"},{"anchor":"Testing-effects","level":2,"text":"Testing effects","type":"heading"},{"inlineContent":[{"text":"Testing state mutations as shown in the previous section is powerful, but is only half the story","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when it comes to testing features built in the Composable Architecture. The second responsibility of"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":"s, after mutating state from an action, is to return an "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" that encapsulates a"},{"type":"text","text":" "},{"text":"unit of work that runs in the outside world and feeds data back into the system.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Effects form a major part of a feature’s logic. They can perform network requests to external"},{"type":"text","text":" "},{"type":"text","text":"services, load and save data to disk, start and stop timers, interact with Apple frameworks (Core"},{"type":"text","text":" "},{"text":"Location, Core Motion, Speech Recognition, etc.), and more.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As a simple example, suppose we have a feature with a button such that when you tap it, it starts","type":"text"},{"type":"text","text":" "},{"text":"a timer that counts up until you reach 5, and then stops. This can be accomplished using the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"text":" helper on ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":", which provides you with"},{"text":" ","type":"text"},{"type":"text","text":"an asynchronous context to operate in and can send multiple actions back into the system:"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case startTimerButtonTapped","    case timerTick","  }","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .startTimerButtonTapped:","        state.count = 0","        return .run { send in","          for _ in 1...5 {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","","      case .timerTick:","        state.count += 1","        return .none","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To test this we can start off similar to how we did in the "},{"identifier":"#Testing-state-changes","overridingTitleInlineContent":[{"type":"text","text":"previous section"}],"overridingTitle":"previous section","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"when testing state mutations:"}]},{"type":"codeListing","code":["@MainActor","struct TimerTests {","  @Test","  func basics() async {","    let store = TestStore(initialState: Feature.State(count: 0)) {","      Feature()","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"With the basics set up, we can send an action into the system to assert on what happens, such as the"},{"type":"text","text":" "},{"code":".startTimerButtonTapped","type":"codeVoice"},{"type":"text","text":" action. This time we don’t actually expect state to change at first"},{"type":"text","text":" "},{"type":"text","text":"because when starting the timer we don’t change state, and so in this case we can leave off the"},{"type":"text","text":" "},{"text":"trailing closure:","type":"text"}],"type":"paragraph"},{"code":["await store.send(.startTimerButtonTapped)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"However, if we run the test as-is with no further interactions with the test store, we get a"},{"type":"text","text":" "},{"text":"failure:","type":"text"}],"type":"paragraph"},{"type":"aside","name":"❌ Failure","style":"note","content":[{"inlineContent":[{"text":"An effect returned for this action is still running. It must complete before the end","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the test. …"}],"type":"paragraph"}]},{"inlineContent":[{"text":"This is happening because ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" requires you to exhaustively prove how the entire system"},{"type":"text","text":" "},{"text":"of your feature evolves over time. If an effect is still running when the test finishes and the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"test store did "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" fail then it could be hiding potential bugs. Perhaps the effect is not"},{"text":" ","type":"text"},{"type":"text","text":"supposed to be running, or perhaps the data it feeds into the system later is wrong. The test store"},{"type":"text","text":" "},{"text":"requires all effects to finish.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To get this test passing we need to assert on the actions that are sent back into the system"},{"text":" ","type":"text"},{"text":"by the effect. We do this by using the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"method, which allows you to assert which action you expect to receive from an effect, as well as how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the state changes after receiving that effect:"}],"type":"paragraph"},{"code":["await store.receive(\\.timerTick) {","  $0.count = 1","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are using key path syntax "},{"type":"codeVoice","code":"\\.timerTick"},{"type":"text","text":" to specify the case of the action we expect to"},{"text":" ","type":"text"},{"text":"receive. This works because the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro automatically applies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to the "},{"type":"codeVoice","code":"Action"},{"text":" enum, and ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" comes from our"},{"text":" ","type":"text"},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true,"type":"reference"},{"type":"text","text":" library which brings key path syntax to enum cases."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if we run this test we still get a failure because we asserted a "},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":" action was"},{"type":"text","text":" "},{"type":"text","text":"going to be received, but after waiting around for a small amount of time no action was received:"}]},{"style":"note","type":"aside","name":"❌ Failure","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Expected to receive an action, but received none after 0.1 seconds."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is because our timer is on a 1 second interval, and by default"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","isActive":true},{"type":"text","text":" only waits for a fraction of a second. This"},{"text":" ","type":"text"},{"type":"text","text":"is because typically you should not be performing real time-based asynchrony in effects, and instead"},{"type":"text","text":" "},{"type":"text","text":"using a controlled entity, such as a clock, that can be sped up in tests. We will demonstrate this"},{"type":"text","text":" "},{"type":"text","text":"in a moment, so for now let’s increase the timeout:"}]},{"type":"codeListing","code":["await store.receive(\\.timerTick, timeout: .seconds(2)) {","  $0.count = 1","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This assertion now passes, but the overall test is still failing because there are still more"},{"text":" ","type":"text"},{"text":"actions to receive. The timer should tick 5 times in total, so we need five ","type":"text"},{"type":"codeVoice","code":"receive"},{"text":" assertions:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["await store.receive(\\.timerTick, timeout: .seconds(2)) {","  $0.count = 1","}","await store.receive(\\.timerTick, timeout: .seconds(2)) {","  $0.count = 2","}","await store.receive(\\.timerTick, timeout: .seconds(2)) {","  $0.count = 3","}","await store.receive(\\.timerTick, timeout: .seconds(2)) {","  $0.count = 4","}","await store.receive(\\.timerTick, timeout: .seconds(2)) {","  $0.count = 5","}"]},{"inlineContent":[{"type":"text","text":"Now the full test suite passes, and we have exhaustively proven how effects are executed in this"},{"text":" ","type":"text"},{"type":"text","text":"feature. If in the future we tweak the logic of the effect, like say have it emit 10 times instead"},{"type":"text","text":" "},{"text":"of 5, then we will immediately get a test failure letting us know that we have not properly","type":"text"},{"text":" ","type":"text"},{"text":"asserted on how the features evolve over time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"However, there is something not ideal about how this feature is structured, and that is the fact","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that we are doing actual, uncontrolled time-based asynchrony in the effect:"}],"type":"paragraph"},{"syntax":"swift","code":["return .run { send in","  for _ in 1...5 {","    try await Task.sleep(for: .seconds(1))  \/\/ ⬅️","    await send(.timerTick)","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means for our test to run we must actually wait for 5 real world seconds to pass so that we"},{"text":" ","type":"text"},{"type":"text","text":"can receive all of the actions from the timer. This makes our test suite far too slow. What if in"},{"type":"text","text":" "},{"text":"the future we need to test a feature that has a timer that emits hundreds or thousands of times?","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"We cannot hold up our test suite for minutes or hours just to test that one feature."}]},{"inlineContent":[{"text":"To fix this we need to add a dependency to the reducer that aids in performing time-based","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchrony, but in a way that is controllable. One way to do this is to add a clock as a"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Dependency"},{"text":" to the reducer:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["import Clocks","","@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  @Dependency(\\.continuousClock) var clock","  \/\/ ...","}"]},{"name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To make use of controllable clocks you must use the "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-clocks","type":"reference","isActive":true},{"text":" library, which","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is automatically included with the Composable Architecture."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"And then the timer effect in the reducer can make use of the clock to sleep rather than reaching","type":"text"},{"text":" ","type":"text"},{"text":"out to the uncontrollable ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"text":" method:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["return .run { send in","  for _ in 1...5 {","    try await self.clock.sleep(for: .seconds(1))","    await send(.timerTick)","  }","}"]},{"style":"tip","name":"Tip","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"sleep(for:)"},{"type":"text","text":" method on "},{"type":"codeVoice","code":"Clock"},{"text":" is provided by the ","type":"text"},{"overridingTitle":"Swift Clocks","type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-clocks","overridingTitleInlineContent":[{"type":"text","text":"Swift Clocks"}],"isActive":true},{"type":"text","text":" "},{"text":"library.","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"By having a clock as a dependency in the feature we can supply a controlled version in tests, such"},{"type":"text","text":" "},{"type":"text","text":"as an immediate clock that does not suspend at all when you ask it to sleep:"}],"type":"paragraph"},{"syntax":"swift","code":["let store = TestStore(initialState: Feature.State(count: 0)) {","  Feature()","} withDependencies: {","  $0.continuousClock = ImmediateClock()","}"],"type":"codeListing"},{"inlineContent":[{"text":"With that small change we can drop the ","type":"text"},{"code":"timeout","type":"codeVoice"},{"text":" arguments from the","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","isActive":true,"type":"reference"},{"type":"text","text":" invocations:"}],"type":"paragraph"},{"type":"codeListing","code":["await store.receive(\\.timerTick) {","  $0.count = 1","}","await store.receive(\\.timerTick) {","  $0.count = 2","}","await store.receive(\\.timerTick) {","  $0.count = 3","}","await store.receive(\\.timerTick) {","  $0.count = 4","}","await store.receive(\\.timerTick) {","  $0.count = 5","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and the test still passes, but now does so immediately."}]},{"inlineContent":[{"type":"text","text":"The more time you take to control the dependencies your features use, the easier it will be to"},{"text":" ","type":"text"},{"text":"write tests for your features. To learn more about designing dependencies and how to best leverage","type":"text"},{"text":" ","type":"text"},{"text":"dependencies, read the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"reference","isActive":true},{"text":" article.","type":"text"}],"type":"paragraph"},{"text":"Non-exhaustive testing","type":"heading","level":2,"anchor":"Non-exhaustive-testing"},{"type":"paragraph","inlineContent":[{"text":"The previous sections describe in detail how to write tests in the Composable Architecture that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exhaustively prove how the entire feature evolves over time. You must assert on how every piece"},{"text":" ","type":"text"},{"type":"text","text":"of state changes, how every effect feeds data back into the system, and you must even make sure"},{"type":"text","text":" "},{"type":"text","text":"that all effects complete before the test store is deallocated. This can be powerful, but it can"},{"text":" ","type":"text"},{"type":"text","text":"also be a nuisance, especially for highly composed features. This is why sometimes you may want"},{"text":" ","type":"text"},{"text":"to test in a non-exhaustive style.","type":"text"}]},{"style":"tip","type":"aside","content":[{"inlineContent":[{"type":"text","text":"The concept of “non-exhaustive test store” was first introduced by"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/www.merowing.info","type":"reference"},{"type":"text","text":" in a "},{"type":"reference","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","isActive":true},{"type":"text","text":" and"},{"text":" ","type":"text"},{"identifier":"https:\/\/vimeo.com\/751173570","type":"reference","isActive":true},{"type":"text","text":", and then later became integrated into the"},{"text":" ","type":"text"},{"text":"core library.","type":"text"}],"type":"paragraph"}],"name":"Tip"},{"inlineContent":[{"text":"This style of testing is most useful for testing the integration of multiple features where you want","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to focus on just a certain slice of the behavior. Exhaustive testing can still be important to use"},{"type":"text","text":" "},{"type":"text","text":"for leaf node features, where you truly do want to assert on everything happening inside the"},{"type":"text","text":" "},{"text":"feature.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose you have a tab-based application where the 3rd tab is a login screen. The user"},{"text":" ","type":"text"},{"text":"can fill in some data on the screen, then tap the “Submit” button, and then a series of events","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"happens to  log the user in. Once the user is logged in, the 3rd tab switches from a login screen"},{"text":" ","type":"text"},{"type":"text","text":"to a profile screen, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" the selected tab switches to the first tab, which is an activity screen."}],"type":"paragraph"},{"inlineContent":[{"text":"When writing tests for the login feature we will want to do that in the exhaustive style so that we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can prove exactly how the feature would behave in production. But, suppose we wanted to write an"},{"text":" ","type":"text"},{"type":"text","text":"integration test that proves after the user taps the “Login” button that ultimately the selected"},{"type":"text","text":" "},{"type":"text","text":"tab switches to the first tab."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In order to test such a complex flow we must test the integration of multiple features, which means","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dealing with complex, nested state and effects. We can emulate this flow in a test by sending"},{"type":"text","text":" "},{"text":"actions that mimic the user logging in, and then eventually assert that the selected tab switched","type":"text"},{"text":" ","type":"text"},{"text":"to activity:","type":"text"}]},{"type":"codeListing","code":["let store = TestStore(initialState: AppFeature.State()) {","  AppFeature()","}","","\/\/ 1️⃣ Emulate user tapping on submit button.","await store.send(\\.login.submitButtonTapped) {","  \/\/ 2️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = true","  \/\/ ...","}","","\/\/ 3️⃣ Login feature performs API request to login, and","\/\/    sends response back into system.","await store.receive(\\.login.loginResponse.success) {","\/\/ 4️⃣ Assert how all state changes in the login feature","  $0.login?.isLoading = false","  \/\/ ...","}","","\/\/ 5️⃣ Login feature sends a delegate action to let parent","\/\/    feature know it has successfully logged in.","await store.receive(\\.login.delegate.didLogin) {","\/\/ 6️⃣ Assert how all of app state changes due to that action.","  $0.authenticatedTab = .loggedIn(","    Profile.State(...)","  )","  \/\/ ...","  \/\/ 7️⃣ *Finally* assert that the selected tab switches to activity.","  $0.selectedTab = .activity","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Doing this with exhaustive testing is verbose, and there are a few problems with this:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We need to be intimately knowledgeable in how the login feature works so that we can assert"},{"type":"text","text":" "},{"type":"text","text":"on how its state changes and how its effects feed data back into the system."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the login feature were to change its logic we may get test failures here even though the"},{"type":"text","text":" "},{"text":"logic we are actually trying to test doesn’t really care about those changes.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"This test is very long, and so if there are other similar but slightly different flows we want"},{"type":"text","text":" "},{"type":"text","text":"to test we will be tempted to copy-and-paste the whole thing, leading to lots of duplicated,"},{"type":"text","text":" "},{"text":"fragile tests.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"Non-exhaustive testing allows us to test the high-level flow that we are concerned with, that of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"login causing the selected tab to switch to activity, without having to worry about what is"},{"text":" ","type":"text"},{"text":"happening inside the login feature. To do this, we can turn off ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity"},{"text":" in the","type":"text"},{"type":"text","text":" "},{"text":"test store, and then just assert on what we are interested in:","type":"text"}]},{"code":["let store = TestStore(initialState: AppFeature.State()) {","  AppFeature()","}","store.exhaustivity = .off  \/\/ ⬅️","","await store.send(\\.login.submitButtonTapped)","await store.receive(\\.login.delegate.didLogin) {","  $0.selectedTab = .activity","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In particular, we did not assert on how the login’s state changed or how the login’s effects fed"},{"text":" ","type":"text"},{"text":"data back into the system. We just assert that when the “Submit” button is tapped that eventually","type":"text"},{"type":"text","text":" "},{"text":"we get the ","type":"text"},{"type":"codeVoice","code":"didLogin"},{"type":"text","text":" delegate action and that causes the selected tab to flip to activity. Now"},{"text":" ","type":"text"},{"type":"text","text":"the login feature is free to make any change it wants to make without affecting this integration"},{"type":"text","text":" "},{"text":"test.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","isActive":true,"type":"reference"},{"text":" for ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"type":"text","text":" causes all un-asserted changes to pass"},{"text":" ","type":"text"},{"text":"without any notification. If you would like to see what test failures are being suppressed without","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actually causing a failure, you can use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let store = TestStore(initialState: AppFeature.State()) {","  AppFeature()","}","store.exhaustivity = .off(showSkippedAssertions: true)  \/\/ ⬅️","","await store.send(\\.login.submitButtonTapped)","await store.receive(\\.login.delegate.didLogin) {","  $0.selectedTab = .activity","}"]},{"inlineContent":[{"type":"text","text":"When this is run you will get grey, informational boxes on each assertion where some change wasn’t"},{"type":"text","text":" "},{"type":"text","text":"fully asserted on:"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}]},{"type":"codeListing","code":["  AppFeature.State(","    authenticatedTab: .loggedOut(","      Login.State(","-       isLoading: false","+       isLoading: true,","        …","      )","    )","  )"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Skipped receiving .login(.loginResponse(.success))"}]},{"inlineContent":[{"type":"text","text":"A state change does not match expectation: …"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["  AppFeature.State(","-   authenticatedTab: .loggedOut(…)","+   authenticatedTab: .loggedIn(","+     Profile.State(…)","+   ),","    …","  )"]},{"inlineContent":[{"text":"(Expected: −, Actual: +)","type":"text"}],"type":"paragraph"}],"name":"◽️ Expected failure","type":"aside"},{"inlineContent":[{"text":"The test still passes, and none of these notifications are test failures. They just let you know","type":"text"},{"type":"text","text":" "},{"type":"text","text":"what things you are not explicitly asserting against, and can be useful to see when tracking down"},{"type":"text","text":" "},{"type":"text","text":"bugs that happen in production but that aren’t currently detected in tests."}],"type":"paragraph"},{"type":"heading","level":4,"text":"Understanding non-exhaustive testing","anchor":"Understanding-non-exhaustive-testing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It can be important to understand how non-exhaustive testing works under the hood because it does"},{"type":"text","text":" "},{"text":"limit the ways in which you can assert on state changes.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When you construct an ","type":"text"},{"inlineContent":[{"type":"text","text":"exhaustive"}],"type":"emphasis"},{"text":" test store, which is the default, the ","type":"text"},{"type":"codeVoice","code":"$0"},{"text":" used inside the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"trailing closure of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"type":"text","text":" represents the state "},{"type":"emphasis","inlineContent":[{"text":"before","type":"text"}]},{"type":"text","text":" the"},{"type":"text","text":" "},{"type":"text","text":"action is sent:"}]},{"code":["let store = TestStore(\/* ... *\/)","\/\/ ℹ️ \"on\" is the default so technically this is not needed","store.exhaustivity = .on","","store.send(.buttonTapped) {","  $0  \/\/ Represents the state *before* the action was sent","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This forces you to apply any mutations necessary to ","type":"text"},{"code":"$0","type":"codeVoice"},{"text":" to match the state ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"text":" the action","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"is sent."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Non-exhaustive test stores flip this on its head. In such a test store, the ","type":"text"},{"code":"$0","type":"codeVoice"},{"text":" handed to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"trailing closure of "},{"code":"send","type":"codeVoice"},{"type":"text","text":" represents the state "},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"text":" the action was sent:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let store = TestStore(\/* ... *\/)","store.exhaustivity = .off","","store.send(.buttonTapped) {","  $0  \/\/ Represents the state *after* the action was sent","}"]},{"inlineContent":[{"text":"This means you don’t have to make any mutations to ","type":"text"},{"type":"codeVoice","code":"$0"},{"type":"text","text":" at all and the assertion will already pass."},{"text":" ","type":"text"},{"type":"text","text":"But, if you do make a mutation, then it must match what is already in the state, thus allowing you"},{"text":" ","type":"text"},{"text":"to assert on only the state changes you are interested in.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, this difference between how "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" behaves when run in exhaustive mode versus"},{"text":" ","type":"text"},{"type":"text","text":"non-exhaustive mode does restrict the kinds of mutations you can make inside the trailing closure of"},{"type":"text","text":" "},{"code":"send","type":"codeVoice"},{"text":". For example, suppose you had an action in your feature that removes the last element of a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"collection:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .removeButtonTapped:","  state.values.removeLast()","  return .none"]},{"inlineContent":[{"type":"text","text":"To test this in an exhaustive store it is completely fine to do this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.send(.removeButtonTapped) {","  $0.values.removeLast()","}"]},{"type":"paragraph","inlineContent":[{"text":"This works because ","type":"text"},{"type":"codeVoice","code":"$0"},{"text":" is the state before the action is sent, and so we can remove the last","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"element to prove that the reducer does the same work."}]},{"inlineContent":[{"text":"However, in a non-exhaustive store this will not work:","type":"text"}],"type":"paragraph"},{"code":["store.exhaustivity = .off","await store.send(.removeButtonTapped) {","  $0.values.removeLast()  \/\/ ❌","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will either fail, or possibly even crash the test suite. This is because in a non-exhaustive"},{"type":"text","text":" "},{"type":"text","text":"test store, "},{"code":"$0","type":"codeVoice"},{"text":" in the trailing closure of ","type":"text"},{"type":"codeVoice","code":"send"},{"text":" represents the state ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"after"}]},{"text":" the action has been","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sent, and so the last element has already been removed. By executing "},{"type":"codeVoice","code":"$0.values.removeLast()"},{"text":" we are","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just removing an additional element from the end."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"So, for non-exhaustive test stores you cannot use “relative” mutations for assertions. That is, you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cannot mutate via methods like "},{"code":"removeLast","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"append"},{"text":", and anything that incrementally applies a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutation. Instead you must perform an “absolute” mutation, where you fully replace the collection"},{"text":" ","type":"text"},{"type":"text","text":"with its final value:"}]},{"code":["store.exhaustivity = .off","await store.send(.removeButtonTapped) {","  $0.values = []","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Or you can weaken the assertion by asserting only on the count of its elements rather than the"},{"text":" ","type":"text"},{"type":"text","text":"content of the element:"}],"type":"paragraph"},{"syntax":"swift","code":["store.exhaustivity = .off","await store.send(.removeButtonTapped) {","  XCTAssertEqual($0.values.count, 0)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, when using non-exhaustive test stores that also show skipped assertions (via"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","isActive":true},{"type":"text","text":"), then there is another caveat to keep in mind. In"},{"type":"text","text":" "},{"text":"such test stores, the trailing closure of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","type":"reference","isActive":true},{"type":"text","text":" is invoked"},{"type":"text","text":" "},{"inlineContent":[{"text":"twice","type":"text"}],"type":"emphasis"},{"type":"text","text":" by the test store. First with "},{"code":"$0","type":"codeVoice"},{"type":"text","text":" representing the state after the action is sent to see if"},{"type":"text","text":" "},{"type":"text","text":"it does not match the true state, and then again with "},{"type":"codeVoice","code":"$0"},{"text":" representing the state before the action","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is sent so that we can show what state assertions were skipped."}]},{"inlineContent":[{"text":"Because the test store can invoke your trailing assertion closure twice you must be careful if your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure performs any side effects, because those effects will be executed twice. For example,"},{"text":" ","type":"text"},{"type":"text","text":"suppose you have a domain model that uses the controllable "},{"code":"@Dependency(\\.uuid)","type":"codeVoice"},{"text":" to generate a UUID:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct Model: Equatable {","  let id: UUID","  init() {","    @Dependency(\\.uuid) var uuid","    self.id = uuid()","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is a perfectly fine to pattern to adopt in the Composable Architecture, but it does cause","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"trouble when using non-exhaustive test stores and showing skipped assertions. To see this, consider"},{"text":" ","type":"text"},{"text":"the following simple reducer that appends a new model to an array when an action is sent:","type":"text"}]},{"code":["@Reducer","struct Feature {","  struct State: Equatable {","    var values: [Model] = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.values.append(Model())","        return .none","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"We’d like to be able to write a test for this by asserting that when the "},{"type":"codeVoice","code":"addButtonTapped"},{"type":"text","text":" action"},{"type":"text","text":" "},{"text":"is sent a model is append to the ","type":"text"},{"code":"values","type":"codeVoice"},{"text":" array:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Test","func add() async {","  let store = TestStore(initialState: Feature.State()) {","    Feature()","  } withDependencies: {","    $0.uuid = .incrementing","  }","  store.exhaustivity = .off(showSkippedAssertions: true)","","  await store.send(.addButtonTapped) {","    $0.values = [Model()]","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"While we would expect this simple test to pass, it fails when "},{"code":"showSkippedAssertions","type":"codeVoice"},{"type":"text","text":" is set to"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"aside","style":"note","name":"❌ Failure","content":[{"inlineContent":[{"text":"A state change does not match expectation: …","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":["  TestStoreNonExhaustiveTests.Feature.State(","    values: [","      [0]: TestStoreNonExhaustiveTests.Model(","-       id: UUID(00000000-0000-0000-0000-000000000001)","+       id: UUID(00000000-0000-0000-0000-000000000000)","      )","    ]","  )"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"(Expected: −, Actual: +)","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"This is happening because the trailing closure is invoked twice, and the side effect that is"},{"type":"text","text":" "},{"type":"text","text":"executed when the closure is first invoked is bleeding over into when it is invoked a second time."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, when the closure is evaluated the first time it causes "},{"type":"codeVoice","code":"Model()"},{"text":" to be constructed,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which secretly generates the next auto-incrementing UUID. Then, when we run the closure again"},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"another","type":"text"}]},{"type":"text","text":" "},{"code":"Model()","type":"codeVoice"},{"type":"text","text":" is constructed, which causes another auto-incrementing UUID to be generated,"},{"text":" ","type":"text"},{"type":"text","text":"and that value does not match our expectations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to use the "},{"type":"codeVoice","code":"showSkippedAssertions"},{"text":" option for","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)"},{"text":" then you should avoid performing any kind of side","type":"text"},{"type":"text","text":" "},{"type":"text","text":"effect in "},{"type":"codeVoice","code":"send"},{"type":"text","text":", including using "},{"type":"codeVoice","code":"@Dependency"},{"text":" directly in your models’ initializers. Instead","type":"text"},{"text":" ","type":"text"},{"text":"force those values to be provided at the moment of initializing the model:","type":"text"}]},{"code":["struct Model: Equatable {","  let id: UUID","  init(id: UUID) {","    self.id = id","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then move the responsibility of generating new IDs to the reducer:"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct Feature {","  \/\/ ...","  @Dependency(\\.uuid) var uuid","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.values.append(Model(id: self.uuid()))","        return .none","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And now you can write the test more simply by providing the ID explicitly:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["await store.send(.addButtonTapped) {","  $0.values = [","    Model(id: UUID(0))","  ]","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And it works if you send the action multiple times:"}]},{"type":"codeListing","code":["await store.send(.addButtonTapped) {","  $0.values = [","    Model(id: UUID(0))","  ]","}","await store.send(.addButtonTapped) {","  $0.values = [","    Model(id: UUID(0)),","    Model(id: UUID(1))","  ]","}"],"syntax":"swift"},{"type":"heading","anchor":"Testing-gotchas","level":2,"text":"Testing gotchas"},{"text":"Testing host application","type":"heading","level":3,"anchor":"Testing-host-application"},{"inlineContent":[{"text":"This is not well known, but when an application target runs tests it actually boots up a simulator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and runs your actual application entry point in the simulator. This means while tests are running,"},{"text":" ","type":"text"},{"type":"text","text":"your application’s code is separately also running. This can be a huge gotcha because it means you"},{"text":" ","type":"text"},{"type":"text","text":"may be unknowingly making network requests, tracking analytics, writing data to user defaults or to"},{"type":"text","text":" "},{"text":"the disk, and more.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This usually flies under the radar and you just won’t know it’s happening, which can be problematic."},{"text":" ","type":"text"},{"type":"text","text":"But, once you start using this library and start controlling your dependencies, the problem can"},{"type":"text","text":" "},{"text":"surface in a very visible manner. Typically, when a dependency is used in a test context without","type":"text"},{"type":"text","text":" "},{"type":"text","text":"being overridden, a test failure occurs. This makes it possible for your test to pass successfully,"},{"type":"text","text":" "},{"text":"yet for some mysterious reason the test suite fails. This happens because the code in the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"app","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"host"}]},{"type":"text","text":" is now running in a test context, and accessing dependencies will cause test failures."}]},{"inlineContent":[{"type":"text","text":"This only happens when running tests in a "},{"inlineContent":[{"text":"application target","type":"text"}],"type":"emphasis"},{"type":"text","text":", that is, a target that is"},{"type":"text","text":" "},{"type":"text","text":"specifically used to launch the application for a simulator or device. This does not happen when"},{"type":"text","text":" "},{"type":"text","text":"running tests for frameworks or SPM libraries, which is yet another good reason to modularize"},{"text":" ","type":"text"},{"type":"text","text":"your code base."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, if you aren’t in a position to modularize your code base right now, there is a quick"},{"type":"text","text":" "},{"type":"text","text":"fix. Our "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay"},{"text":" library, which is transitively included","type":"text"},{"type":"text","text":" "},{"text":"with this library, comes with a property you can check to see if tests are currently running. If","type":"text"},{"type":"text","text":" "},{"type":"text","text":"they are, you can omit the entire entry point of your application:"}],"type":"paragraph"},{"type":"codeListing","code":["import SwiftUI","import ComposableArchitecture","","@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      if TestContext.current == nil{","        \/\/ Your real root view","      }","    }","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"That will allow tests to run in the application target without your actual application code"},{"type":"text","text":" "},{"type":"text","text":"interfering."}],"type":"paragraph"},{"text":"Statically linking your tests target to ComposableArchitecture","anchor":"Statically-linking-your-tests-target-to-ComposableArchitecture","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you statically link the "},{"type":"codeVoice","code":"ComposableArchitecture"},{"text":" module to your tests target, its implementation","type":"text"},{"type":"text","text":" "},{"text":"may clash with the implementation that is statically linked to the app itself. The most usually","type":"text"},{"type":"text","text":" "},{"text":"manifests by getting mysterious test failures telling you that you are using live dependencies in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"your tests even though you have overridden your dependencies."}]},{"type":"paragraph","inlineContent":[{"text":"In such cases Xcode will display multiple warnings in the console similar to:","type":"text"}]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Class _TtC12Dependencies[…] is implemented in both […] and […]."},{"type":"text","text":" "},{"text":"One of the two will be used. Which one is undefined.","type":"text"}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"The solution is to remove the static link to "},{"code":"ComposableArchitecture","type":"codeVoice"},{"text":" from your test target, as you","type":"text"},{"text":" ","type":"text"},{"text":"transitively get access to it through the app itself. In Xcode, go to “Build Phases” and remove","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“ComposableArchitecture” from the “Link Binary With Libraries” section. When using SwiftPM, remove"},{"type":"text","text":" "},{"type":"text","text":"the “ComposableArchitecture” entry from the "},{"code":"testTarget","type":"codeVoice"},{"text":"‘s’ ","type":"text"},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" array in "},{"type":"codeVoice","code":"Package.swift"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Long-living test stores","anchor":"Long-living-test-stores","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Test stores should always be created in individual tests when possible, rather than as a shared"},{"text":" ","type":"text"},{"type":"text","text":"instance variable on the test class:"}],"type":"paragraph"},{"code":[" @MainActor"," struct FeatureTests {","   \/\/ 👎 Don't do this:","-  let store = TestStore(initialState: Feature.State()) {","-    Feature()","-  }","","   @Test","   func basics() async {","     \/\/ 👍 Do this:","+    let store = TestStore(initialState: Feature.State()) {","+      Feature()","+    }","     \/\/ ...","   }"," }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows you to be very precise in each test: you can start the store in a very specific state,"},{"type":"text","text":" "},{"text":"and override just the dependencies a test cares about.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"More crucially, test stores that are held onto by the test class will not be deinitialized during a"},{"type":"text","text":" "},{"type":"text","text":"test run, and so various exhaustive assertions made during deinitialization will not be made,"},{"text":" ","type":"text"},{"inlineContent":[{"text":"e.g.","type":"text"}],"type":"emphasis"},{"type":"text","text":" that the test store has unreceived actions that should be asserted against, or in-flight"},{"type":"text","text":" "},{"type":"text","text":"effects that should complete."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a test store does "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" deinitialize at the end of a test, you must explicitly call"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:fileID:file:line:column:)-klnc"},{"text":" at the end of the test to retain","type":"text"},{"type":"text","text":" "},{"text":"exhaustive coverage:","type":"text"}]},{"code":["await store.finish()"],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/testing"]}],"sections":[],"abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture."}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}],"title":"Testing"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"url":"\/documentation\/composablearchitecture\/dependencymanagement","title":"Dependencies","kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","abstract":[{"type":"text","text":"Learn how to register dependencies with the library so that they can be immediately accessible from"},{"text":" ","type":"text"},{"text":"any reducer.","type":"text"}],"role":"article"},"#Testing-state-changes":{"type":"link","identifier":"#Testing-state-changes","titleInlineContent":[{"text":"Testing state changes","type":"text"}],"url":"#Testing-state-changes","title":"Testing state changes"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}]},"https://www.merowing.info/exhaustive-testing-in-tca/":{"title":"blog post","titleInlineContent":[{"type":"text","text":"blog post"}],"type":"link","url":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/","identifier":"https:\/\/www.merowing.info\/exhaustive-testing-in-tca\/"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"type":"topic","title":"Reducer()","abstract":[{"text":"Helps implement the conformance to the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" protocol for a type."}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","url":"\/documentation\/composablearchitecture\/reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off":{"type":"topic","title":"off","url":"\/documentation\/composablearchitecture\/exhaustivity\/off","abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"let","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"off"},{"text":": ","kind":"text"},{"text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","kind":"typeIdentifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8f2pl":{"title":"send(_:assert:fileID:file:line:column:)","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl","type":"topic","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8f2pl","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"TestStoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","url":"\/documentation\/composablearchitecture\/teststore","type":"topic","role":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"abstract":[{"type":"text","text":"A testable runtime for a reducer."}]},"#Non-exhaustive-testing":{"title":"Non-exhaustive testing","titleInlineContent":[{"type":"text","text":"Non-exhaustive testing"}],"type":"link","url":"#Non-exhaustive-testing","identifier":"#Non-exhaustive-testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","type":"topic","role":"symbol","title":"exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"exhaustivity"},{"text":": ","kind":"text"},{"text":"Exhaustivity","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/finish(timeout:fileID:file:line:column:)-klnc":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"finish","kind":"identifier"},{"kind":"text","text":"("},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Duration","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/teststore\/finish(timeout:fileid:file:line:column:)-klnc","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/finish(timeout:fileID:file:line:column:)-klnc","kind":"symbol","type":"topic","abstract":[{"text":"Suspends until all in-flight effects have finished, or until it times out.","type":"text"}],"role":"symbol","title":"finish(timeout:fileID:file:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"kind":"symbol","type":"topic","title":"Effect","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"title":"receive(_:timeout:assert:fileID:file:line:column:)","conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"receive"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")?, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic","abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","title":"run(priority:operation:catch:fileID:filePath:line:column:)","kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"run"},{"kind":"text","text":"("},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","preciseIdentifier":"s:ScP","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"catch"},{"kind":"text","text":": ((any "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":") -> "},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}]},"https://www.merowing.info":{"title":"Krzysztof Zabłocki","titleInlineContent":[{"type":"text","text":"Krzysztof Zabłocki"}],"type":"link","url":"https:\/\/www.merowing.info","identifier":"https:\/\/www.merowing.info"},"http://github.com/pointfreeco/swift-case-paths":{"title":"CasePaths","titleInlineContent":[{"type":"text","text":"CasePaths"}],"type":"link","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"http://github.com/pointfreeco/swift-clocks":{"title":"Clocks","titleInlineContent":[{"type":"text","text":"Clocks"}],"type":"link","url":"http:\/\/github.com\/pointfreeco\/swift-clocks","identifier":"http:\/\/github.com\/pointfreeco\/swift-clocks"},"https://vimeo.com/751173570":{"title":"conference talk","titleInlineContent":[{"type":"text","text":"conference talk"}],"type":"link","url":"https:\/\/vimeo.com\/751173570","identifier":"https:\/\/vimeo.com\/751173570"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/state":{"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"}],"title":"state","url":"\/documentation\/composablearchitecture\/teststore\/state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/state","type":"topic","abstract":[{"type":"text","text":"The current state of the test store."}],"kind":"symbol"},"#Testing-effects":{"title":"Testing effects","titleInlineContent":[{"type":"text","text":"Testing effects"}],"type":"link","url":"#Testing-effects","identifier":"#Testing-effects"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"title":"Store","navigatorTitle":[{"text":"Store","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"text":"around to views that need to interact with the application.","type":"text"}]},"http://github.com/pointfreeco/xctest-dynamic-overlay":{"title":"XCTest Dynamic Overlay","titleInlineContent":[{"type":"text","text":"XCTest Dynamic Overlay"}],"type":"link","url":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay","identifier":"http:\/\/github.com\/pointfreeco\/xctest-dynamic-overlay"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)":{"kind":"symbol","title":"Exhaustivity.off(showSkippedAssertions:)","url":"\/documentation\/composablearchitecture\/exhaustivity\/off(showskippedassertions:)","role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"off"},{"kind":"text","text":"("},{"text":"showSkippedAssertions","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Exhaustivity\/off(showSkippedAssertions:)","abstract":[{"type":"text","text":"Non-exhaustive assertions."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"url":"\/documentation\/composablearchitecture","role":"collection","kind":"symbol","type":"topic","title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"#Testing-gotchas":{"title":"Testing gotchas","titleInlineContent":[{"type":"text","text":"Testing gotchas"}],"type":"link","url":"#Testing-gotchas","identifier":"#Testing-gotchas"}}}